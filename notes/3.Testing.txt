# Functional Testing: Test end to end of a use case/scenarios
  - (testing functionality of a product as a user)
# Integration Testing: Tests how multiple components work together.
    - anything outside the application code = db-calls,3rd party, queries
# Unit Testing: Tests individual components or functions in isolation.
    - anything outside the method should be mocked.
#Advantage Mocking
    - no dependency on 3rd party tests
    - we can mock and response for any scenario
B2B -> compliance [Data residency]
    - physical locations of data should save at company locations.
    - DB-platforms:service acts as DB
* Instead of calling the 3rd party services we actually mock the 3rd party response.

Scenarios in unit testing:
    1) bad cases -> scenarios we don't expect
    2) corner cases -> first and last index
    3) happy cases

Best Practices for unit testing:
    Structure:
        3A          3C
        Arrange |   Create  -> create the required object and mock dependencies.
        Act     |   Call    -> call the method that you need to be tested.
        Assert  |   Check   -> check tf things are working fine.
    they should be fast,isolated,repeatable -> no flakiness, self checking-> no input once test is created,
    test behaviour not implementation.

TDD - Test Driven Development -> first test then develop code.

@MockBean - for injecting/autowiring

// create a test class
// test package structure should be similar as main code package structure
// thing that you want to test as a proper dependency [autowired and not mocked]
// test method should suggest what you are testing
// after creating objects ,call the method you want to test and then compare the input and output


@BeforeEach - Runs before every test method.
@AfterEach - Runs after every test method.
@BeforeAll - Runs once before all test methods in the class.
@AfterAll - - Runs once after all tests have finished

//Junit
@Mock - we need mock ,object of it is a dependency of the actual test
@InjectMocks - the class we want to test and this is where we should inject

- for every testcase you create brand-new object, use it and destroy it.
    - to keep things clean and isolated
    - eg:creates Repo object use it and destroys it.

- finally is used for resource closing in try catch.
    Scanner sc;
    try{
        sc = new Scanner(system.in);
    }finally{ // resource clean up
        sc.close();
    }

when(categoryRepository.findByName(any())).thenReturn(mockCategory); -> try to avoid any() as much as possible

(H2Database)

#Integration Test
- Spawn a docker container for db
- Connecting code to your db
- Insert dummy data inside db
- Run the tests
- Destroy the container

* Dispatcher - routes the http requests to appropriate controllers


# WebMockMVC

